using System;
using System.Collections.Generic;

namespace ElectronicsShop
{
    internal class Program
    {
        private static void Main()
        {
            string _keyboards
            string[] keyboards = _keyboards.Split(' ');
            int[] newKeyboards = Array.ConvertAll(keyboards, i => Convert.ToInt32(i));

            string _drives
            string[] drives = _drives.Split(' ');
            int[] newDrives = Array.ConvertAll(drives, i => Convert.ToInt32(i));

            Console.WriteLine(GetMoneySpent(newKeyboards, newDrives, 839979));
            Console.ReadLine();
        }

        private static int GetMoneySpent(int[] keyboards, int[] drives, int b)
        {
            bool insufficientFunds = false;
            int theMostExpensiveBase = 0;
            int theMostExpensive = 0;

            for (int i = 0; i < keyboards.Length; i++)
            {
                FirstLoopControl(keyboards, drives, b, ref insufficientFunds, ref theMostExpensiveBase, ref theMostExpensive, i);
            }

            return Result(insufficientFunds, theMostExpensive); ;
        }

        private static void FirstLoopControl(int[] keyboards, int[] drives, int b, ref bool insufficientFunds, ref int theMostExpensiveBase, ref int theMostExpensive, int i)
        {
            int driverLength = drives.Length;
            int keyboardsLength = keyboards.Length;
            int driveValue;
            int keyboardValue;
            for (int j = 0; j < drives.Length; j++)
            {
                driveValue = drives[j];
                keyboardValue = keyboards[i];

                if (keyboardsLength < 2 || driverLength < 2)
                {
                    if (driveValue + keyboardValue > b)
                    {
                        insufficientFunds = true;
                        break;
                    }
                }
                else
                {
                    if (driveValue + keyboardValue <= b) theMostExpensiveBase = driveValue + keyboardValue;
                    if (theMostExpensive < theMostExpensiveBase) theMostExpensive = theMostExpensiveBase;
                }
            }
        }

        private static int Result(bool insufficientFunds, int theMostExpensive)
        {
            int result;
            if (insufficientFunds) result = -1;
            else if (theMostExpensive == 0) result = -1;
            else result = theMostExpensive;
            return result;
        }
    }
}